/* Core registers */
GDB_REG(r0,	  env->r[0])
GDB_REG(r1, 	  env->r[1])
GDB_REG(r2, 	  env->r[2])
GDB_REG(r3, 	  env->r[3])
GDB_REG(r4, 	  env->r[4])
GDB_REG(r5, 	  env->r[5])
GDB_REG(r6, 	  env->r[6])
GDB_REG(r7, 	  env->r[7])
GDB_REG(r8, 	  env->r[8])
GDB_REG(r9, 	  env->r[9])
GDB_REG(r10,	  env->r[10])
GDB_REG(r11, 	  env->r[11])
GDB_REG(r12, 	  env->r[12])
GDB_REG(r13, 	  env->r[13])
GDB_REG(r14, 	  env->r[14])
GDB_REG(r15, 	  env->r[15])
GDB_REG(r16, 	  env->r[16])
GDB_REG(r17, 	  env->r[17])
GDB_REG(r18, 	  env->r[18])
GDB_REG(r19, 	  env->r[19])
GDB_REG(r20, 	  env->r[20])
GDB_REG(r21, 	  env->r[21])
GDB_REG(r22, 	  env->r[22])
GDB_REG(r23, 	  env->r[23])
GDB_REG(r24, 	  env->r[24])
GDB_REG(r25, 	  env->r[25])
GDB_REG(gp,	  CPU_GP(env))
GDB_REG(fp, 	  CPU_FP(env))
GDB_REG(sp, 	  CPU_SP(env))
GDB_REG(ilink,	  CPU_ILINK1(env))
GDB_REG(r30,	  env->r[30])
GDB_REG(blink,	  CPU_BLINK(env))
GDB_REG(lp_count, CPU_LP(env))
GDB_REG(pcl,	  CPU_PCL(env))

/* Minimal Aux registers */
GDB_AUX_REG(pc, env->pc)
GDB_AUX_REG(status32, CPU_STATUS32_VAL)
